・並んだ入力を配列に入れる
	vector<int> vec(H);
	for (int i = 0; i < H; i++) {
		cin >> vec[i];
	}

・並んだ入力を変数に入れる
	long long A, B, C, D, E, F;
	cin >> A >> B >> C >> D >> E >> F;

・map (連想配列や辞書と呼ばれるデータ構造)
	mapは「特定の値にある値が紐づいている」データを扱える
	map<keyの型, valueの型> 変数名;
	メモ化再帰
	定義
		map<int, int> memo;
	キーで降順ソートされているので、一番大きいキーを取得したい場合
		auto it = memo.rbegin();
	キーが存在する限りバリューを順に出力したい場合
		for(auto it = memo.rbegin(); it != memo.rend(); it++) printf("%d\n", it->second);
	mapサイズ
		(int)memo.size();
	値の追加　O(logN)
		memo[key] = value;
	値の削除　O(logN)
		memo.erase(key);
	値のアクセス　O(logN)
		memo.at(key)  // keyに対応するvalueが存在しない場合はエラーになる
		memo[key]     // keyに対応するvalueが存在しない場合はValueの型の初期値が追加される
	keyに要素があるか　O(logN)
		if (memo.count(key))
	要素数の取得（対応ペアが何組あるか）　O(1)
		memo.size();
	ループ
		// Keyの値が小さい順にループ
		for (auto p : memo) {
			auto key = p.first;
			auto value = p.second;
			printf("%d %d\n", key, value);
		}
	計算量
		値の追加 		[]			O(logN)
		値の削除 		erase(key)	O(logN)
		値へのアクセス 	at			O(logN)
		所属判定 		count		O(logN)
		要素数の取得 	size		O(1)
		丸ごとコピー				O(N)
		初期化			clear		O(N)

・unordered_map
	基本機能はmapと一緒
	メリット
		・アクセスや検索が高速
	デメリット
		・pairやtupleなどのハッシュ関数が定義されていない型をKeyとして用いることができない
		・ループで取り出すときに、どのような順番で取り出されるかが分からない
	計算量
		値の追加 		[]		平均O(1)
		値の削除 		erase	平均O(1)
		値へのアクセス 	at		平均O(1)
		所属判定 		count	平均O(1)
		要素数の取得 	size	O(1)


・queue　追加した順で取り出す
	int main() {
		queue<int> q;
		q.push(1);
		q.push(10);
		q.push(3);
		q.push(6);

		// 空でない間繰り返す
		//
		while (!q.empty()) {
			cout << q.front() << endl;  // 先頭の値を出力
			q.pop();  // 先頭の値を削除
		}// 1 10 3 6
	}
	サイズ
		q.size();
	計算量
		push 	O(1)
		front 	O(1)
		pop 	O(1)
		size 	O(1)
		コピー	O(N)

・priority_queue 優先度付きキュー
	ダイクストラ法などで用いられる
	int main() {
		priority_queue<int> pq;
		// こう定義したら小さい順に取り出せる
		// priority_queue<int, vector<int>, greater<int>> pq;
		pq.push(1);
		pq.push(10);
		pq.push(3);
		pq.push(6);

		// 空でない間繰り返す
		while (!pq.empty()) {
			cout << pq.top() << endl;  // 最大の値を出力
			pq.pop();  // 最大の値を削除
		}// 10 6 3 1
	}
	計算量
		push 	O(logN)
		top 	O(1)
		pop 	O(logN)
		size 	O(1)
		コピー	O(N)

・set
	重複の無いデータのまとまりを扱うためのデータ型
	「Keyだけのmap」のようなイメージ
	int main() {
		set<int> S;

		S.insert(3);
		S.insert(7);
		S.insert(8);
		S.insert(10);
		// 既に3は含まれているのでこの操作は無視される
		S.insert(3);
		S.erase(10);

		// 集合の要素数を出力
		cout << "size: " << S.size() << endl;

		// 7が含まれるか判定
		if (S.count(7)) cout << "found 7" << endl;
	}

	set<int> S;
	S.insert(1);
	S.erase(1);
	S.size();
	S.count(1);
	S.empty();
	最小値の取得（空のsetにするとエラー）
		*begin(変数);
	最大値の取得（空のsetにするとエラー）
		*rbegin(変数)
	ループ
		for (auto value : S) {
			// valueを使う
		}
	計算量
		値の追加		O(logN)
		値の削除		O(logN)
		所属判定		O(logN)
		要素数の取得	O(1)
		最小値の取得	O(1)
		最大値の取得	O(1)

	278での使用例
	set<pair<int, int>> follow;
	follow.insert({a, b});
	follow.erase({a, b});
	auto it1 = follow.find({a, b});
	it1 != follow.end()

・unordered_set
	setに制約がついたもの（高速)
	デメリット
		・pairやtupleなどのハッシュ関数が定義されていない型をKeyとして用いることができない
		・ループで取り出すときに、どのような順番で取り出されるかが分からない
		・最大値や最小値を取り出すことができない
	計算量
		値の追加 		insert	平均O(1)
		値の削除 		erase	平均O(1)
		値へのアクセス 	at		平均O(1)
		所属判定 		count	平均O(1)
		要素数の取得 	size	O(1)


・lower_bound / upper_bound　O(logN)
	昇順にソートされた配列で使用可能
	lower_bound: x以上の最小の数列
	upper_bound: xを超える最小の要素
	int main() {
		vector<int> a = {0, 10, 13, 14, 20};

		// aにおいて、12 以上最小の要素は 13
		cout << *lower_bound(a.begin(), a.end(), 12) << endl; // 13

		// 10 を超える最小の要素は 13
		cout << *upper_bound(a.begin(), a.end(), 10) << endl; // 13
	}

・stack　（新しく追加したものほど先に取り出されるデータ構造）
	int main() {
		stack<int> s;
		s.push(10);
		s.push(1);
		s.push(3);

		cout << s.top() << endl;  // 3 (最後に追加した値)
		s.pop();
		cout << s.top() << endl;  // 1 (その前に追加した値)
	}
	計算量
		push 	O(1)
		front 	O(1)
		pop 	O(1)
		size 	O(1)
		コピー	O(N)

・deque (queueとstackを同時に行える両端キューというデータ構造)
	int main() {
		deque<int> d;
		d.push_back(10);
		d.push_back(1);
		d.push_back(3);
		// { 10, 1, 3 }

		cout << d.front() << endl; // 10 (先頭の要素)
		d.pop_front();  // 先頭を削除
		//{ 1, 3 }

		cout << d.back() << endl;  // 3 (末尾の要素)
		d.pop_back();  // 末尾を削除
		// { 1 }

		d.push_front(5);
		d.push_back(2);
		//{ 5, 1, 2 }

		cout << d.at(1) << endl; // 1
	}
	値の追加
		変数.push_back(値);   // 末尾への値の追加
		変数.push_front(値);  // 先頭への値の追加
	値のアクセス
		変数.front()  // 先頭の値へのアクセス
		変数.back()   // 末尾の値へのアクセス
		変数.at(i)  // i番目へのアクセス
	値の削除
		変数.pop_front();  // 先頭の要素の削除
		変数.pop_back();   // 末尾の要素の削除
	要素数の取得
		変数.size()
	空かどうか
		変数.empty()
	計算量
		push 	O(1)
		front 	O(1)
		pop 	O(1)
		size 	O(1)
		コピー	O(N)

・小数点第n位で四捨五入
	ans = ans * pow(10, n-1);
	ans = round(ans);
	ans /= pow(10, n-1);
・小数点第n位で出力
	printf("%.nf\n", ans);
・大きい数の余りを計算
	(A * B) % mod
	= ((A % mod) * (B % mod)) % mod;
・abs()はlong long 型だと使えないっぽい
・16進数の表示
	printf("%X\n", N); //ABC
	printf("%x\n", N); //abc

・vector
	宣言
		vector<int> vec(N);
		vector<vector<int>> vec(N, vector<int>(W));
		vector<vector<vector<int>>> vec(N, vector<vector<int>>(N, vector<int>(N, 0)));
	ソート
	昇順
		sort(vec.begin(), vec.end());
	降順
		sort(vec.begin(), vec.end(), greater<int>());
	2次元配列の特定のキーでのソート（0でのソート）
		sort(vec.begin(),vec.end(),[](const vector<int> &alpha,const vector<int> &beta){return alpha[1] < beta[1];});
	最小値　最大値
		int max = *max_element(v.begin(), v.end());
		int min = *min_element(v.begin(), v.end());

・各行で長さが違う２次元配列をつくりたいとき
		vector<vector<int>> vec(N + 1, vector<int>(1, 0));
		for (int i = 1; i <= N; i++) {
			cin >> L;
			for (int j = 1; j <= L; j++) {
				cin >> A;
				vec[i].push_back(A);
			}
		}

・pair
	宣言・初期化
		pair<string, int> p("abc", 3);
		set<pair<int, int>> follow;
	取得
  		p.first, p.second  // abc
	代入
 		p.first = "hello";
  	生成
		p = make_pair("*", 1);

		string s;
		int a;
		tie(s, a) = p;
		cout << s << endl;  // *
		cout << a << endl;  // 1

・1～Nまで１ずつ上がる配列を生成
	vector<int> v(N);
	iota(v.begin(), v.end(), 1);
・順列全列挙
	do {
        for (int i = 0; i < N; i ++) {

		}
    } while (next_permutation(v.begin(), v.end()));
・階乗
	int factorial(int n)
	{
		int ret = 1;
		while (n > 1)
			ret *= n--;
		return ret;
	}

・bit全探索
	int n = 3; //2^n

	for (int bit = 0; bit < (1 << n); ++bit)
	{
		for (int i = 0; i < n; ++i)
		{
			if (bit & (1 << i)) //bitが１
			else //bitが0
		}
	}

最小公倍数
	lcm(A, B);
最大公約数
	gcd(A, B);

小数点の出力精度の調整
	float f = 3.145900F;
	// デフォルトは整数部も含めた桁数指定
	cout << setprecision(3) << f << endl;
	// fixedを同時に使用することで小数点以下の桁数指定になる
	cout << fixed << setprecision(3) << f << endl;

出力
printf
	%c	char										１文字を出力する					"%c"
	%s	char *										文字列を出力する					"%8s", "%-10s"
	%d	int, short									整数を10進で出力する				"%-2d","%03d"
	%u	unsigned int, unsigned short				符号なし整数を10進で出力する		"%2u","%02u"
	%o	int, short, unsigned int, unsigned short	整数を8進で出力する					"%06o","%03o"
	%x	int, short, unsigned int, unsigned short	整数を16進で出力する				"%04x"
	%f	float										実数を出力する						"%5.2f"
	%e	float										実数を指数表示で出力する			"%5.3e"
	%g	float										実数を最適な形式で出力する			"%g"
	%ld	long										倍精度整数を10進で出力する			"%-10ld"
	%lu	unsigned long								符号なし倍精度整数を10進で出力する	"%10lu"
	%lo	long, unsigned long							倍精度整数を8進で出力する			"%12lo"
	%lx	long, unsigned long							倍精度整数を16進で出力する			"%08lx"
	%lf	double										倍精度実数を出力する				"%8.3lf"

	%(全体の桁数).(小数点以下の桁数)で指定ができる。
	%0(全体の桁数)で0埋め
	%-で左詰め
	%+でプラス表示

数値型から文字列型への変換
	to_string(num);
int num;の桁数を取得
	to_string(num).length()
文字列型からint型への変換
	stoi(str);
文字列型からdouble型への変換
	stod(dou);

多重ループをbreakで一気に抜ける方法
	bool finished = false;  // 外側のループを抜ける条件を満たしているかどうか(フラグ変数)

	for (int i = 0; i < ... ; i++) {
		for (int j = 0; j < ... ; j++) {
			if (/* 2重ループを抜ける条件 */) { finished = true; break; }
		}
		if (finished) break;
	}

入力（行単位）
	string s;
	getline(cin, s);

引数の参照渡し（https://atcoder.jp/contests/apg4b/tasks/APG4b_u）(もう一回）
	&変数で、変数のコピーを渡す

	返り値を複数返すことができる
	上手く使うことで計算量にも貢献する

	// a,b,cの最大値、最小値をそれぞれminimumの参照先、maximumの参照先に代入する
	void min_and_max(int a, int b, int c, int &minimum, int &maximum) {
		minimum = min(a, min(b, c));  // 最小値をminimumの参照先に代入
		maximum = max(a, max(b, c));  // 最大値をmaximumの参照先に代入
	}
	int main() {
		int minimum, maximum;
		min_and_max(3, 1, 5, minimum, maximum);  // minimum, maximumを参照渡し
		cout << "minimum: " <<  minimum << endl;  // 最小値
		cout << "maximum: " <<  maximum << endl;  // 最大値
	}

A～Bまでの総和
	// (a ≦ b)という前提
	int sum_range(int a, int b) {
		// ベースケース
		if (a == b) {
			return a;
		}
		// 再帰ステップ
		return sum_range(a, b - 1) + b;  //「a~bの総和」=「a~(b-1)の総和」+ b
	}

	int main() {
		cout << sum_range(0, 4) << endl; // 0 + 1 + 2 + 3 + 4 = 10
		cout << sum_range(5, 8) << endl; // 5 + 6 + 7 + 8 = 26
	}

配列の総和
	// (補助関数)
	// dataのi番目以降の要素の総和を計算する
	int array_sum_from_i(vector<int> &data, int i) {
		// 対象の要素がないので総和は0
		if (i == data.size()) return 0;
		// i+1番目以降の要素の総和
		int s = array_sum_from_i(data, i + 1);
		// 「i番目以降の要素の総和」=「i番目の要素」+ s
		return data.at(i) + s;
	}

	// dataの全ての要素の総和を計算する
	int array_sum(vector<int> &data) {
		return array_sum_from_i(data, 0);
	}

	// 0 + 3 + 9 + 1 + 5 = 18
	int main() {
		vector<int> a = {0, 3, 9, 1, 5};
		cout << array_sum(a) << endl;
	}

素数判定（https://keisan.casio.jp/exec/system/1161228771）
	// i ~ N-1の範囲にNの約数が存在するか
	bool has_divisor(int N, int i) {
		// ベースケース1
		if (i == N) return false;
		// ベースケース2
		// 実際にiはNの約数なので、i ~ N-1の範囲に約数が存在する
		if (N % i == 0) return true;

		// i+1 ~ N-1の範囲の結果がi ~ N-1の範囲の結果となる
		// (ベースケース2によって、iがNの約数の場合は取り除かれているので、あとはi+1 ~ N-1の範囲を調べればよい)
		return has_divisor(N, i + 1);
	}

	bool is_prime(int N) {
		// 1は素数ではない
		if (N == 1) return false;
		// 2は素数
		else if (N == 2) return true;
		// 2~(N-1)の範囲に約数が無ければ、Nは素数
		else return !has_divisor(N, 2);
	}

	int main() {
		cout << is_prime(13) << endl; // 1
		cout << is_prime(57) << endl; // 0
	}

配列を逆にする
	// dataのi番目以降の要素を逆順にした配列を返す
	vector<int> reverse_array_from_i(vector<int> &data, int i) {
		// ベースケース
		if (i == data.size()) {
			vector<int> empty_array(0);  // 要素数0の配列
			return empty_array;
		}

		// 再帰ステップ
		vector<int> tmp = reverse_array_from_i(data, i + 1);  // dataのi+1番目以降の要素を逆順にした配列を得る
		tmp.push_back(data.at(i));  // 末尾にdataのi番目の要素を追加
		return tmp;
	}

	// 配列を逆順にしたものを返す
	vector<int> reverse_array(vector<int> &data) {
		return reverse_array_from_i(data, 0);
	}

	int main() {
		vector<int> a = {1, 2, 3, 4, 5};
		vector<int> b = reverse_array(a);
		for (int i = 0; i < b.size(); i++) {
			cout << b.at(i) << endl;
		}
	}

A / Bの切り上げ
(A + B - 1) / B;

pair, tuple, auto(https://atcoder.jp/contests/apg4b/tasks/APG4b_z)
構造体（https://atcoder.jp/contests/apg4b/tasks/APG4b_ab）
ビット演算（https://atcoder.jp/contests/apg4b/tasks/APG4b_ac）
イテレータ（https://atcoder.jp/contests/apg4b/tasks/APG4b_ai）
ポインタ（https://atcoder.jp/contests/apg4b/tasks/APG4b_aj）

正方形の座標の取り方
X = x2 - x1;
Y = Y2 - Y1;
x3 = x2 - Y;
y3 = y2 + X;
x4 = x1 - Y;
y4 = y1 + X;


Easy
68:?(vector, map, tuple, pair)
69:?(考え方、動的計画法）

Medium
15: 文字列操作　苦手意識ある

AOJ提出用
#include <iostream>
#include <vector>
#include <algorithm>
#include <stdio.h>
using namespace std;
